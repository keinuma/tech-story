scalar Time

type Story {
    id: Int!
    title: String!
    user: User!
}

type Match {
    id: Int!
    story: Story!
    date: Time!
    attendees: [User!]!
}

type User {
    id: Int!
    uid: String!
    name: String!
    description: String
}

input NewStory {
    text: String!
    userId: Int!
}

input NewUser {
    uid: String!
    name: String!
    description: String
}

input NewMatch {
    storyId: Int!
    date: Time!
    attendees: [Int!]!
}

type Query {
    getStories: [Story!]!
    getMatches: [Match!]!
}

type Mutation {
    createStory(input: NewStory!): Story!
    createUser(input: NewUser!): User!
    createMatch(input: NewMatch!): Match!
}
