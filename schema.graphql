type Story {
    id: Int!
    title: String!
    user: User!
}

type Match {
    id: Int!
    story: Story!
    date: Time!
    attendees: [User!]!
    comments: [Comment!]
}

type Comment {
    text: String!
    postedAt: Time!
}

type User {
    id: Int!
    uid: String!
    name: String!
    description: String
}

input NewStory {
    text: String!
    userId: Int!
}

input NewUser {
    uid: String!
    name: String!
    description: String
}

input NewMatch {
    storyId: Int!
    date: Time!
    attendees: [Int!]!
}

input NewComment {
    matchId: Int!
    text: String!
    postedAt: Time!
}

type Query {
    getStories: [Story!]!
    getMatches: [Match!]!
}

type Mutation {
    createStory(input: NewStory!): Story!
    createUser(input: NewUser!): User!
    createMatch(input: NewMatch!): Match!
    deleteUser(userId: Int!): Boolean @hasRole(role: ADMIN)
    createComment(input: NewComment!): Comment!
}

type Subscription {
    createMatch(userUID: String!): Match
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
    ADMIN
    USER
}

scalar Time
